#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <readline/readline.h>
#include <readline/history.h>

typedef char * string;
      
void showdir(string dir) {
    char cwd[1024];
    strcat(dir, "(");
    strcat(dir, getcwd(cwd, sizeof(cwd)));
    strcat(dir, ") : ");
}

void tokenizer (string cmd, char *argv[]){
    int i;
    string token;
    	token = strtok(cmd, " ");	
	for(i = 0; token != NULL; i++) {
	    argv[i] = token;
	    token = strtok (NULL, " ");
	}
	argv[i] = NULL;
}

int main() {
    string cmd;
     char cwd[1024];
    char dir [1024];
    char *argv[30];
    int pid;
    
    while(1) {
	
	strcpy(dir, "");
	showdir( dir );
	cmd = readline( dir );
	add_history(cmd);
	
	tokenizer (cmd, argv);

	pid = fork ();

	if (pid == 0) {
	    //falta a barra
	    printf("O argumento é %s\n", strcat(getcwd(cwd, sizeof(cwd)),argv[1]));
	    if (strcmp (argv[0]-1, "chmod")){
		printf("é o meu chmod\n");
		if (chmod (strcat(getcwd(cwd, sizeof(cwd)),argv[1]), atoi (argv[2])) < 0)
		    printf("Errrrroou!");
	    }
	    else {
		printf("execve\n");
	    execvp (argv[0], argv);
	    //fprintf (stderr, "Child process could not do execvp\n");
	    }
	}
	else {                    //Parent
	    wait(NULL);
	    //printf("Child exited\n");
	}
    }
    
    return 0;

}
